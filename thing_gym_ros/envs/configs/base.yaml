# Base config file for all envs. Other envs will use these values unless they are specifically overwritten
# with their own config files.

# note: as a rule of thumb, these values should be as reusable as possible between envs, while values that
#       are expected to change between each env should be actual class parameters.

# TODO
# 1. ensure that depth values are what is expected
# 1. set up launch for cameras plus thing gym
# 3. drop the force applied by the gripper before stopping movement
# POSSIBLE BUGS
#     - full batch BC trains way faster than the 5 epochs that happen more frequently?
#     - after triggering a correction, robot slightly changes position
#     - 

# resetting
reset_base_tool_tf: [-0.02, 0.882, 0.814, -0.863, -0.036, 1.636]  # 3 for trans, 3 for rot as explained in README
reset_joint_pos: [-1.71, -1.2, 1.61, 4.44, -0.87, -2.1]     # 1 per joint, ensures consistent pose for above tf

# control
control_type: 'delta_tool'    # 'delta_tool', 'delta_joint', 'pos_tool', 'pos_joint', 'vel_tool', 'vel_joint'
rot_act_rep: 'rod'            # 'rod' for rodrigues, 'quat' for quaternion
control_freq: 8               # in Hz
poses_ref_frame: 'b'          # 'b' or 'w' for base or world
arm_max_trans_vel: .15        # m/s, also value used for resets
arm_max_rot_vel: .3           # rad/s, also used for resets
max_policy_time: .07          # max expected time that a running policy would take -- this should be set as low as possible
                              # this also should include the max time to process images before they are returned
                              # in step AND the forward time for the failure predictor
                              # -- finally, this must be lower than 1/control_freq
max_grip_force: 0             # integer from 0-255, 0 is min, 255 is max, settings for rFRA of gripper

# thing_control params
servo_time_from_start: .15    # Time after publishing that controller should aim to be at new
                              # position by. Lower --> faster, but jerkier."
traj_time_between_points: .3  # Time between points in full trajectory for resetting.

# physical constraints
pos_limits: [-0.5, 0.5, .73, 0.5, 1.2, 1.3]   # corners of a box relative to the robot base origin [-x, -y, -z, x, y z]

# images
img_width: 64
img_height: 48
img_center_crop: 1.8        # e.g. 2.0 cuts out half of height, half of width, only taking middle
alt_img_topic: /camera/color/image_raw                        # if different from default from kinect or sim kinect
alt_depth_topic: /camera/aligned_depth_to_color/image_raw     # if different from default from kinect or sim kinect
depth_max_dist: 5.0         # in meters, anything beyond this value is fixed to this value, and the actual depth
                            # img is stored as 0 for 0m, and 1.0 for this value and higher
require_img_depth_registration: True  # whether img and depth must be registered, since user creating cam nodes
                                      # needs to take care of this themselves
cam_forward_axis: x         # forward axis of camera_link frame -- x for sim and realsense, z for kinect
sensor: realsense           # realsense or kinect

# numerical observations
num_prev_pose: 5
num_prev_grip: 2

# base params (if moving_base is true -- otherwise ignored)
base_theta_maximums: [-0.4, 0.4]    # radians based on making a circle around the workspace center
cam_workspace_distance: .85         # meters from cam frame to workspace center
base_reset_noise: .02               # std in meters and radians for resets of base

# other data
additional_topics: []       # other topics to add to state
